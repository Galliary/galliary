// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

enum UserRole {
  USER
  MOD
  ADMIN
}

enum PremiumFeature {
  NONE

}

model User {
  id        String   @id @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username String  @unique
  nickname String?

  email          String  @unique
  hashedPassword String?

  avatarUrl String?

  role UserRole @default(USER)

  tokens   Token[]
  sessions Session[]

  albums Album[]
  images Image[]
}

model Session {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Token {
  id        String   @id @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  hashedToken String
  type        String
  expiresAt   DateTime
  sentTo      String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([hashedToken, type])
}

model Category {
  slug    String @id @unique
  display String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  album   Album  @relation(fields: [albumId], references: [id])
  albumId String

  image   Image  @relation(fields: [imageId], references: [id])
  imageId String

  @@index([albumId, imageId])
}

model Image {
  id        String   @id @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sourceId      String

  title       String?
  description String?

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  categories Category[]

  album   Album?  @relation(fields: [albumId], references: [id])
  albumId String?

  @@index([id, authorId])
}

model Album {
  id        String   @id @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  sourceId String?

  title       String
  description String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  images     Image[]
  categories Category[]

  @@index([id, authorId])
}
