// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

enum UserRole {
  USER
  TRUSTED
  MOD
  ADMIN
}

enum UserBadge {
  MODERATOR
  TRUSTED
  NSFW
  PREMIUM
}

enum PremiumFeature {
  CUSTOM_PROFILE
  UNLIMITED_UPLOADS
}

enum SafetyRating {
  TRUSTED
  SAFE
  UNKNOWN
  NOT_SAFE
  NSFW
}

enum LockingStatus {
  BANNED
  LOCKED
  HIDDEN
  NONE
}

enum UserConnectionType {
  DISCORD
  GOOGLE
  TWITTER
  EMAIL
}

model User {
  id        String   @id @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username String  @unique
  nickname String?

  bio String?

  email          String  @unique
  hashedPassword String?

  avatarUrl String?

  bannerSourceId String?

  role   UserRole    @default(USER)
  badges UserBadge[]

  likes    Int @default(0)
  dislikes Int @default(0)

  lockStatus LockingStatus @default(NONE)

  connections     UserConnection[]
  premiumFeatures PremiumFeature[]

  tokens   Token[]
  sessions Session[]

  albums Album[]
  images Image[]

  favouriteUsers User[] @relation(name: "UserFavouriteUsers")
  favouriteAlbums Album[] @relation(name: "UserFavouriteAlbums")
  favouriteImages Image[] @relation(name: "UserFavouriteImages")

  userFavourites   User[]   @relation("UserFavouriteUsers", references: [id])
  userFavouriteIds String[]
}

model UserConnection {
  type UserConnectionType

  email        String?
  authToken    String?
  refreshToken String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([userId, type])
}

model Session {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Token {
  id        String   @id @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  hashedToken String
  type        String
  expiresAt   DateTime
  sentTo      String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([hashedToken, type])
}

model Category {
  slug    String @id @unique
  display String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  album   Album  @relation(fields: [albumId], references: [id])
  albumId String

  image   Image  @relation(fields: [imageId], references: [id])
  imageId String

  lockStatus LockingStatus @default(NONE)
  rating     SafetyRating  @default(UNKNOWN)

  @@index([albumId, imageId])
}

model Image {
  id        String   @id @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sourceId String
  colors   Int[]

  title       String?
  description String?

  likes    Int @default(0)
  dislikes Int @default(0)

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  categories Category[]

  album   Album  @relation(fields: [albumId], references: [id])
  albumId String

  lockStatus LockingStatus @default(NONE)
  rating     SafetyRating  @default(UNKNOWN)

  userFavourites   User[]   @relation("UserFavouriteImages", references: [id])
  userFavouriteIds String[]

  @@index([id, authorId])
}

model Album {
  id        String   @id @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  sourceId String
  colors   Int[]

  title       String?
  description String?

  likes    Int @default(0)
  dislikes Int @default(0)

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  images     Image[]
  categories Category[]

  lockStatus LockingStatus @default(NONE)
  rating     SafetyRating  @default(UNKNOWN)

  userFavourites   User[]   @relation("UserFavouriteAlbums", references: [id])
  userFavouriteIds String[]

  @@index([id, authorId])
}

enum AuditAction {
  DELETE_IMAGE
  DELETE_ALBUM
  DELETE_USER
  DELETE_CATEGORY

  LOCK_IMAGE
  LOCK_ALBUM
  LOCK_USER
  LOCK_CATEGORY

  UNLOCK_IMAGE
  UNLOCK_ALBUM
  UNLOCK_USER
  UNLOCK_CATEGORY

  UPDATE_IMAGE_RATING
  UPDATE_ALBUM_RATING
  UPDATE_USER_RATING
  UPDATE_CATEGORY_RATING

  UPDATE_IMAGE_STATUS
  UPDATE_ALBUM_STATUS
  UPDATE_USER_STATUS
  UPDATE_CATEGORY_STATUS

  EDIT_IMAGE_NAME
  EDIT_ALBUM_NAME
  EDIT_USER_NAME
  EDIT_CATEGORY_NAME

  EDIT_IMAGE_DESCRIPTION
  EDIT_ALBUM_DESCRIPTION
  EDIT_USER_DESCRIPTION
  EDIT_CATEGORY_DESCRIPTION

  EDIT_IMAGE_SOURCE
  EDIT_ALBUM_SOURCE

  BAN_USER
  UNBAN_USER
}

model AuditLog {
  id        String   @id @unique
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  affectedUser   User?   @relation(fields: [affectedUserId], references: [id])
  affectedUserId String?

  affectedImage   Image?   @relation(fields: [affectedImageId], references: [id])
  affectedImageId String?

  affectedAlbum   Image?   @relation(fields: [affectedAlbumId], references: [id])
  affectedAlbumId String?

  affectedCategory   Image?   @relation(fields: [affectedCategoryId], references: [id])
  affectedCategoryId String?

  action AuditAction

  valueBefore Any?
  valueAfter Any
}
